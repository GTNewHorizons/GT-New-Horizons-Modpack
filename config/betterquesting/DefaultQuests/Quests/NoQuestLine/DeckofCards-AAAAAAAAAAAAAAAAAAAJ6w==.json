{
  "preRequisites:9": {
    "0:10": {
      "questIDHigh:4": 0,
      "questIDLow:4": 183
    }
  },
  "properties:10": {
    "betterquesting:10": {
      "autoClaim:1": 0,
      "desc:8": "These cards add additional functionality to certain devices or fixtures. They specify what devices they work on in the tooltip.\n\nThe Redstone Card adds redstone interactivity to the devices it can be used on, with the following options:\nAlways active, active with or without redstone signal, activate once per pulse.\n\nThe Capacity Card adds more slots for items that use them. If you add this to an Export Bus, an icon is added to select item priority.\n\nThe Crafting Card allows you to automatically request autocrafting of items.\nIn an ME Interface, if you put in items to be stocked, if there aren\u0027t enough, it\u0027ll craft them until it reaches the selected amount. Remember that these are being stocked for crafting recipes that the ME Interface has. If you want them to be seen by the network, you\u0027ll need to put a storage bus on the ME Interface.\n\nIn an ME Level Emitter, in the first mode, it\u0027ll emit a redstone signal while the specific item is being crafted. In the second, it will emit a redstone signal once a crafting job for the item has been requested, [warn]but it won\u0027t send the items to be crafted.[/warn] This is useful if you\u0027re using a dummy pattern, and are using the level emitter to tell something else to happen. You still need to get the item(s) requested back into the system so it doesn\u0027t tie up a crafting CPU though.\n\nIn an ME Export Bus, it\u0027ll attempt to send whatever item(s) are selected in the export bus\u0027 GUI. In the first mode, it\u0027ll send available items first, then create crafting jobs for the rest. In the second mode, it will only send crafted items.\n\nThe Acceleration Card makes the device/fixture work faster. You\u0027ll probably want a lot of these.\n\nThe Inverter Card allows you to invert the item filter of certain fixtures.\n\nThe Fuzzy Card allows you to apply fuzzy logic to filtering to allow items with different NBT or damage data to be counted as the same. This is different from metadata. If you just want it to be fuzzy for nbt, set to Match Any. If it is set to 99%, it will work on anything that is damaged. You can use the Inverter Card to reverse this.",
      "globalShare:1": 0,
      "icon:10": {
        "Count:3": 1,
        "Damage:2": 30,
        "OreDict:8": "",
        "id:8": "appliedenergistics2:item.ItemMultiMaterial"
      },
      "isMain:1": 0,
      "isSilent:1": 0,
      "lockedProgress:1": 0,
      "name:8": "Deck of Cards",
      "questLogic:8": "AND",
      "repeatTime:3": -1,
      "repeat_relative:1": 1,
      "simultaneous:1": 0,
      "snd_complete:8": "random.levelup",
      "snd_update:8": "random.levelup",
      "taskLogic:8": "AND",
      "visibility:8": "NORMAL"
    }
  },
  "questIDHigh:4": 0,
  "questIDLow:4": 2539,
  "rewards:9": {
    "0:10": {
      "ignoreDisabled:1": 0,
      "index:3": 0,
      "rewardID:8": "bq_standard:item",
      "rewards:9": {
        "0:10": {
          "Count:3": 1,
          "Damage:2": 37,
          "OreDict:8": "",
          "id:8": "enhancedlootbags:lootbag"
        }
      }
    },
    "1:10": {
      "ignoreDisabled:1": 0,
      "index:3": 1,
      "rewardID:8": "bq_standard:item",
      "rewards:9": {
        "0:10": {
          "Count:3": 1,
          "Damage:2": 0,
          "OreDict:8": "",
          "id:8": "dreamcraft:item.CoinTechnicianII"
        }
      }
    }
  },
  "tasks:9": {
    "0:10": {
      "autoConsume:1": 0,
      "consume:1": 0,
      "groupDetect:1": 0,
      "ignoreNBT:1": 1,
      "index:3": 0,
      "partialMatch:1": 1,
      "requiredItems:9": {
        "0:10": {
          "Count:3": 3,
          "Damage:2": 25,
          "OreDict:8": "",
          "id:8": "appliedenergistics2:item.ItemMultiMaterial"
        },
        "1:10": {
          "Count:3": 3,
          "Damage:2": 28,
          "OreDict:8": "",
          "id:8": "appliedenergistics2:item.ItemMultiMaterial"
        }
      },
      "taskID:8": "bq_standard:optional_retrieval"
    },
    "1:10": {
      "autoConsume:1": 0,
      "consume:1": 0,
      "groupDetect:1": 0,
      "ignoreNBT:1": 1,
      "index:3": 1,
      "partialMatch:1": 1,
      "requiredItems:9": {
        "0:10": {
          "Count:3": 1,
          "Damage:2": 26,
          "OreDict:8": "",
          "id:8": "appliedenergistics2:item.ItemMultiMaterial"
        },
        "1:10": {
          "Count:3": 1,
          "Damage:2": 27,
          "OreDict:8": "",
          "id:8": "appliedenergistics2:item.ItemMultiMaterial"
        },
        "2:10": {
          "Count:3": 1,
          "Damage:2": 53,
          "OreDict:8": "",
          "id:8": "appliedenergistics2:item.ItemMultiMaterial"
        },
        "3:10": {
          "Count:3": 1,
          "Damage:2": 30,
          "OreDict:8": "",
          "id:8": "appliedenergistics2:item.ItemMultiMaterial"
        },
        "4:10": {
          "Count:3": 1,
          "Damage:2": 31,
          "OreDict:8": "",
          "id:8": "appliedenergistics2:item.ItemMultiMaterial"
        },
        "5:10": {
          "Count:3": 1,
          "Damage:2": 29,
          "OreDict:8": "",
          "id:8": "appliedenergistics2:item.ItemMultiMaterial"
        }
      },
      "taskID:8": "bq_standard:retrieval"
    }
  }
}